class Node{
    constructor(val){
        this.data = val;
        this.next = null;
        this.prev = null;
    }
}
class Doublylinkedlist{
    constructor(){
        this.head = null
        this.tail = null
        this.length = 0
    }
     push(val){
        var newNode = new Node(val)
        if(this.length === 0){
            this.head = newNode
            this.tail = newNode
        } else{
            this.tail.next = newNode;
            newNode.prev = this.tail;
            this.tail = newNode
        }
        this.length = this.length + 1
        return this.length
    }
    pop(){
        if(!this.head){
            return "No Node Available"
        }
         var poppedNode = this.tail 
        if(this.length === 1){
            this.head = null
            this.tail = null
        }else{
            this.tail = poppedNode.prev
            this.tail.next = null
            poppedNode.prev =null
        }
        this.length = this.length - 1
        return poppedNode
    }
    shift(){
        if(this.length === 0){
            return "No Node Available"
        }
        var oldHead = this.head 
        if(this.length === 1){
            this.head = null
            this.tail = null
        }else{
            this.head = oldHead.next
            this.head.prev = null
            oldHead.next = null
        }
        this.length = this.length - 1
        return oldHead
    }
    unshift(val){
        var newNode = new Node(val)
        if(this.length === 0){
            this.head = null
            this.tail = null
        }else{
            this.head.prev = newNode;
            newNode.next = this.head;
            this.head = newNode;
        }
        this.length = this.length + 1
        return this.length
    }
    get(index){
        if(index < 0 || index >= this.length) return null
        var count, current
        if(index <= this.length/2){
            console.log("WORKING FROM START")
            count = 0;
            current = this.head;
            while(count !== index){
                current = current.next;
                count++;
            }
        }else{
            console.log("WORKING FROM END")
            count = this.length - 1
            current = this.tail 
            while(count !== index){
                current = current.prev;
                count--;
            }
        }
        return current
    }
    set(index, val){
        var foundNode = this.get(index);
        if(foundNode != null){
            foundNode.val = val;
            return true;
        }
        return false;
    }
    insert(index,val){
        if(index < 0 || index > this.length) return false;
        if(index === 0) return !!this.unshift(val);
        if(index === this.length) return !this.push(val);
        
        var newNode = new Node(val);
        var beforeNode = this.get(index-1);
        var afterNode = beforeNode.next;
        
        beforeNode.next = newNode;
        newNode.prev = beforeNode;
        newNode.next = afterNode;
        afterNode.prev = newNode;
        this.length++;
        return true
    }
    remove(index){
        if(index < 0 || index >= this.length) return "No Node Available";
        if(index === 0) return this.shift();
        if(index === this.length - 1)return this.pop();
        var removeNode = this.get(index);
        var beforeNode = removeNode.prev;
        var afterNode = removeNode.next;
        beforeNode.next = afterNode;
        afterNode.prev = beforeNode;
        // removeNode.prev.next = removeNode.next;
        // removeNode.next.prev = removeNode.prev;
        removeNode.next = null;
        removeNode.prev = null;
        this.length--;
        return removeNode;
    }
}
const ar = new Doublylinkedlist()
